# see https://packaging.python.org/appveyor/#adding-appveyor-support-to-your-project
clone_depth: 1
environment:

  PYPI_PASSWORD:
    secure: Gxrd9WI60wyczr9mHtiQHvJ45Oq0UyQZNrvUtKs2D5w=
  PYPI_USERNAME: niccokunzmann3

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python27"
      UPLOAD_TO_PYPI: false
    - PYTHON: "C:\\Python33"
      UPLOAD_TO_PYPI: true
    - PYTHON: "C:\\Python34"
      UPLOAD_TO_PYPI: false
    - PYTHON: "C:\\Python35"
      UPLOAD_TO_PYPI: false

install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "if \"%PYTHON%\" == \"C:\\Python27\" ( %PYTHON%\\python.exe -m pip install mock==2.0.0 )"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python evrsion you want to use on PATH.
  - "%PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
  - set HOME=.
  # in https://ci.appveyor.com/project/niccokunzmann/ObservableList/settings/environment
  # set the variables for the python package index http://pypi.python.org/
  #   PYPI_USERNAME
  #   PYPI_PASSWORD
  - "%PYTHON%\\python.exe -c \"import os;print('[distutils]\\r\\nindex-servers =\\r\\n    pypi\\r\\n\\r\\n[pypi]\\r\\nusername:{PYPI_USERNAME}\\r\\npassword:{PYPI_PASSWORD}\\r\\n'.format(**os.environ))\" > %HOME%\\.pypirc"
  # upload to pypi
  # check for the tags
  # see http://www.appveyor.com/docs/branches#build-on-tags-github-and-gitlab-only
  - echo %APPVEYOR_REPO_TAG%
  - echo %APPVEYOR_REPO_TAG_NAME%
  - echo %UPLOAD_TO_PYPI%
  - "IF %APPVEYOR_REPO_TAG% == true ( if \"%UPLOAD_TO_PYPI%\" == \"true\" ( FOR /F %%V IN ('%PYTHON%\\python.exe setup.py --version') DO ( IF \"v%%V\" == \"%APPVEYOR_REPO_TAG_NAME%\" ( %PYTHON%\\python.exe setup.py bdist_wininst upload || echo \"Error because the build is already uploaded.\" ) ELSE ( echo \"Invalid tag %APPVEYOR_REPO_TAG_NAME% should be v%%V.\" ) ) ) ELSE ( echo \"Upload skipped.\" ) ) ELSE ( echo \"Normal build without PyPi deployment.\" )"

